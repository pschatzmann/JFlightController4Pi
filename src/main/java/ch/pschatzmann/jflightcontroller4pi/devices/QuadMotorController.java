package ch.pschatzmann.jflightcontroller4pi.devices;

import java.util.Arrays;
import java.util.Collections;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ch.pschatzmann.jflightcontroller4pi.FlightController;
import ch.pschatzmann.jflightcontroller4pi.control.PIDController;
import ch.pschatzmann.jflightcontroller4pi.parameters.ParametersEnum;

/**
Implementation of a simple motor controller for Quadrotors. The target pitch, roll, yaw and speed are 
read from the parameters and then translated with the help of PIDs to motor output values.

Here is a overview schema of the quadrotor motors:

		x1     x2
		  |  | 
		  |	 |
		x3     x4
		
		yaw -> x1 / x4 > x2 / x3
		pitch -> x1 / x2 < x3 / x4	
		roll -> x1 / x3 > x2 /x4
		speed -> x1 x2 x3 x4
		
The Motors 1/4 and 3/2 are spinning their motors in opposite direction.  Roll is generated by giving aymetric power
to the motors on the left and right side. Pitch is generated by giving aysmetric power to the front and back motors
and yaw is controlled by giving the right spinning motors asymetric power compared to the left spinning motors.

**/

public class QuadMotorController implements IOutDevice {
	private static Logger log = LoggerFactory.getLogger(QuadMotorController.class);
	private FlightController flightController;
	private double speedFactor=0.25;
	private double rollFactor=0.25;
	private double pitchFactor=0.25;
	private double yawFactor=0.25;
	private PIDController pidRoll = new PIDController();
	private PIDController pidPitch = new PIDController();
	private PIDController pidYaw = new PIDController();
	private double frequency;

	
	public QuadMotorController(){		
	}
	
	/**
	 * Calculate the necessary motor output. The value is scaled from 0 to 1.0
	 * @param rollDeg
	 * @param pitchDeg
	 * @param yawDeg
	 * @param speed
	 * @return
	 */
	public double[] getMotorOutput(double rollDeg, double pitchDeg, double yawDeg, double speed) {
		double roll = rollDeg / 360.0;
		double pitch = pitchDeg / 360.0;
		double yaw = yawDeg / 360.0;
		
		double m1 = speed * speedFactor + roll * rollFactor + pitch * pitchFactor + yaw * yawFactor;
		double m2 = speed * speedFactor + roll * -rollFactor + pitch * pitchFactor + yaw * -yawFactor;
		double m3 = speed * speedFactor + roll * rollFactor + pitch * -pitchFactor + yaw * -yawFactor;
		double m4 = speed * speedFactor + roll * -rollFactor + pitch * -pitchFactor + yaw * yawFactor;
	
		double result[] = {m1,m2,m3,m4};
		return limitScale(result);
	 }

	/**
	 * Scale the values to be be betwen 0 and 1.0
	 * @param in
	 * @return
	 */
	protected double[] limitScale(double[] in) {
		double[] result;
		double max = Arrays.stream(in).max().getAsDouble();
		if (max>1.0) {
			double factor = 1.0 / max;
			double[] resultScaled = {Math.max(in[0]*factor,0.0), Math.max(in[1]*factor,0.0), Math.max(in[3]*factor,0.0)};
			result = resultScaled;
		} else {
			result = in;
		}
		return result;
	}

	@Override
	public void setup(FlightController flightController) {
		this.flightController = flightController;
	}

	@Override
	public void shutdown() {
		// we just switch off the motors
		flightController.setValue(ParametersEnum.MOTOR1, 0.0);
		flightController.setValue(ParametersEnum.MOTOR2, 0.0);
		flightController.setValue(ParametersEnum.MOTOR3, 0.0);
		flightController.setValue(ParametersEnum.MOTOR4, 0.0);
	}

	@Override
	public String getName() {
		return this.getClass().getSimpleName();
	}

	@Override
	public void processOutput() {
		// get pitch parameters
		double pitch = value(ParametersEnum.SENSORPITCH);
		double pitchTarget = value(ParametersEnum.PITCH);
		double pitchControlled = pidPitch.getOutput(pitch, pitchTarget);
		
		// get roll parameters
		double roll = value(ParametersEnum.SENSORROLL);
		double rollTarget = value(ParametersEnum.ROLL);
		double rollControlled = pidPitch.getOutput(pitch, pitchTarget);
		
		// get yaw parameters
		double yaw = value(ParametersEnum.SENSORYAW);
		double yawTarget = value(ParametersEnum.YAW);
		double yawControlled = pidPitch.getOutput(pitch, pitchTarget);
		
		// get speed parameters
		double throttle = value(ParametersEnum.SPEED);
		
		// calculate motor power
		double motors[] = getMotorOutput(rollControlled, pitchControlled, yawControlled,throttle);
		
		// update motor parameters
		flightController.setValue(ParametersEnum.MOTOR1, motors[0]);
		flightController.setValue(ParametersEnum.MOTOR2, motors[1]);
		flightController.setValue(ParametersEnum.MOTOR3, motors[2]);
		flightController.setValue(ParametersEnum.MOTOR4, motors[3]);
		
	}

	protected double value(ParametersEnum p) {
		return flightController.getValue(p).value;
	}

	/**
	 * @return the speedFactor
	 */
	public double getSpeedFactor() {
		return speedFactor;
	}

	/**
	 * @param speedFactor the speedFactor to set
	 */
	public void setSpeedFactor(double speedFactor) {
		this.speedFactor = speedFactor;
	}

	/**
	 * @return the rollFactor
	 */
	public double getRollFactor() {
		return rollFactor;
	}

	/**
	 * @param rollFactor the rollFactor to set
	 */
	public void setRollFactor(double rollFactor) {
		this.rollFactor = rollFactor;
	}

	/**
	 * @return the pitchFactor
	 */
	public double getPitchFactor() {
		return pitchFactor;
	}

	/**
	 * @param pitchFactor the pitchFactor to set
	 */
	public void setPitchFactor(double pitchFactor) {
		this.pitchFactor = pitchFactor;
	}

	/**
	 * @return the yawFactor
	 */
	public double getYawFactor() {
		return yawFactor;
	}

	/**
	 * @param yawFactor the yawFactor to set
	 */
	public void setYawFactor(double yawFactor) {
		this.yawFactor = yawFactor;
	}

	/**
	 * @return the pidRoll
	 */
	public PIDController getPidRoll() {
		return pidRoll;
	}

	/**
	 * @param pidRoll the pidRoll to set
	 */
	public void setPidRoll(PIDController pidRoll) {
		this.pidRoll = pidRoll;
	}

	/**
	 * @return the pidPitch
	 */
	public PIDController getPidPitch() {
		return pidPitch;
	}

	/**
	 * @param pidPitch the pidPitch to set
	 */
	public void setPidPitch(PIDController pidPitch) {
		this.pidPitch = pidPitch;
	}

	/**
	 * @return the pidYaw
	 */
	public PIDController getPidYaw() {
		return pidYaw;
	}

	/**
	 * @param pidYaw the pidYaw to set
	 */
	public void setPidYaw(PIDController pidYaw) {
		this.pidYaw = pidYaw;
	}
	
	@Override
	public void setFrequency(double frequency) {
		this.frequency = frequency;
		
	}

	@Override
	public double getFrequency() {
		return this.frequency;
	}

	@Override
	public String toString() {
		return this.getName();
	}
	 	 
}
