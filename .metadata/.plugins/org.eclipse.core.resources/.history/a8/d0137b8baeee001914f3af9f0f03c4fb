package ch.pschatzmann.jflightcontroller4pi.tests;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import ch.pschatzmann.jflightcontroller4pi.FlightController;
import ch.pschatzmann.jflightcontroller4pi.devices.OutDevice;
import ch.pschatzmann.jflightcontroller4pi.integration.JMXParameterStore;
import ch.pschatzmann.jflightcontroller4pi.modes.FlightMode;
import ch.pschatzmann.jflightcontroller4pi.parameters.ParametersEnum;
import ch.pschatzmann.jflightcontroller4pi.protocols.NullDevice;

/**
 * Checks the basic functionality of the FlightController
 * 
 * @author pschatzmann
 *
 */

public class TestFlightController {
	FlightController ctl;
	OutDevice rudder;
	OutDevice elevator;
	OutDevice aileron;
	OutDevice throttle;

	@Before
	public void setup() {
		ctl = new FlightController();
		rudder = new OutDevice(ctl, ParametersEnum.RUDDER,  0.0, new NullDevice());
		elevator = new OutDevice(ctl, ParametersEnum.ELEVETOR,  0.0, new NullDevice());
		aileron = new OutDevice(ctl, ParametersEnum.AILERON,  0.0, new NullDevice());
		throttle = new OutDevice(ctl, ParametersEnum.THROTTLE,  -1.0, new NullDevice());
		
		ctl.setMode(new FlightMode(new AcroModeLogic(ctl, rudder, elevator, aileron, throttle)));

		new Thread(() -> {
			ctl.run();
		}).start();

		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	@Test
	public void testDevices() {
		FlightMode fm = (FlightMode) ctl.getMode();
		// devices known from FlightModeLogic
		// devices know to mode
		Assert.assertEquals(4, fm.getDevices().size());
		// devices known by controller
		Assert.assertEquals(4, ctl.getDevices().size());
		
	}
	
	@Test
	public void testBasicFlowAileron() {

		// check initial value
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.AILERON).value, 0.001);
		Assert.assertEquals(50.0, ((NullDevice) (aileron.getPwmPi())).getValue(), 0.001);

		// Update Aileron values
		ctl.addValue(ParametersEnum.ROLL, -1.0);
		Assert.assertEquals(-1.0, ctl.getValue(ParametersEnum.ROLL).value, 0.001);
		Assert.assertEquals(-1.0, ctl.getValue(ParametersEnum.AILERON).value, 0.001);
		Assert.assertEquals(0.0, ((NullDevice) (aileron.getPwmPi())).getValue(), 0.001);

		ctl.addValue(ParametersEnum.ROLL, 1.0);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.ROLL).value, 0.001);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.AILERON).value, 0.001);
		Assert.assertEquals(100.0, ((NullDevice) (aileron.getPwmPi())).getValue(), 0.001);

		ctl.addValue(ParametersEnum.ROLL, 0.0);
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.ROLL).value, 0.001);
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.AILERON).value, 0.001);
		Assert.assertEquals(50, ((NullDevice) (aileron.getPwmPi())).getValue(), 0.001);

		ctl.shutdown();

	}

	@Test
	public void testBasicFlowThottle() {

		// check initial value
		Assert.assertEquals(-1.0, ctl.getValue(ParametersEnum.THROTTLE).value, 0.001);
		Assert.assertEquals(0.0, ((NullDevice) (throttle.getPwmPi())).getValue(), 0.001);

		ctl.addValue(ParametersEnum.SPEED, 1.0);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.SPEED).value, 0.001);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.THROTTLE).value, 0.001);
		Assert.assertEquals(100, ((NullDevice) (throttle.getPwmPi())).getValue(), 0.001);

		ctl.shutdown();

	}

	@Test
	public void testBasicFlowRudder() {

		// check initial value
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.RUDDER).value, 0.001);
		Assert.assertEquals(50.0, ((NullDevice) (rudder.getPwmPi())).getValue(), 0.001);

		ctl.addValue(ParametersEnum.YAW, 1.0);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.YAW).value, 0.001);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.RUDDER).value, 0.001);
		Assert.assertEquals(100, ((NullDevice) (rudder.getPwmPi())).getValue(), 0.001);

		ctl.shutdown();

	}

	@Test
	public void testBasicFlowElevator() throws InterruptedException {

		// check initial value
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.ELEVETOR).value, 0.001);
		Assert.assertEquals(50.0, ((NullDevice) (elevator.getPwmPi())).getValue(), 0.001);

		ctl.addValue(ParametersEnum.PITCH, 1.0);
		Thread.sleep(1000);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.PITCH).value, 0.001);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.ELEVETOR).value, 0.001);
		Assert.assertEquals(100.0, ((NullDevice) (elevator.getPwmPi())).getValue(), 0.001);

		ctl.shutdown();

	}

	@Test
	public void testJMX() {

		ctl.addValue(ParametersEnum.ROLL, 0.1);
		JMXParameterStore jmx = new JMXParameterStore(ctl);

		Assert.assertEquals(0.1, ctl.getValue(ParametersEnum.ROLL).value, 0.001);
		Assert.assertEquals(0.1, jmx.getRoll(), 0.001);
	}

}
