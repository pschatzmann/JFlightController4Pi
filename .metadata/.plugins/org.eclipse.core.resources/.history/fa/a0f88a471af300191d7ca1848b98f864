# Flightgear

FlightGear is a flight-simulator created by an international group of volunteers, and released as free, open-source GPL software. It has been used for academic research, education, and for fun.

We will use Flightgear to **test the basic functionality** of our Flight Controller.
In order to do that we can receive the status of the plane and send out commands to the Airplane using the UDP interface functionality. 

In the following example we explain how to set up this integration with FlightGear


# Receiving Data from FlightGear

We would like to update the following parameters from Flight Gear:

	- SENSORROLL
	- SENSORPITCH
	- SENSORYAW
	- SENSORSPEED 
	- SENSORDIRECTION 
	- SENSORALTITUDE

This can be done by configuring the DatagramReader

	<bean id="datagramReader" class="ch.pschatzmann.jflightcontroller4pi.integration.DatagramReader" scope="singleton">
	    <property name="flightController" ref="flightController"/> 
	  	<property name="port" value="7001"/>
	  	<property name="fieldDefinitions">
	  		 <bean class="ch.pschatzmann.jflightcontroller4pi.integration.FieldDefinitions">
	  			<property name="fields">
		  		 	<list value-type="ch.pschatzmann.jflightcontroller4pi.parameters.ParametersEnum">
						<value>SENSORROLL</value>
						<value>SENSORPITCH</value>
						<value>SENSORSPEED</value>
						<value>SENSORHEADING</value>
						<value>SENSORALTITUDE</value>
		        	</list>
		        </property>
        	</bean>
        </property>
	</bean>



# Sending Data to FlightGear

We would like to update the following parameters in Flight Gear from the values in our system, in order to control the airplane:

	- RUDDER 
	- AILERON 
	- ELEVETOR 
	- THROTTLE

This can be done with the following definition
					
	<bean id="datagramWriter" class="ch.pschatzmann.jflightcontroller4pi.integration.DatagramWriter" scope="singleton">
	    <property name="flightController" ref="flightController"> </property>
	  	<property name="port" value="7000"/>
	  	<property name="fields" >
	  		 <bean class="ch.pschatzmann.jflightcontroller4pi.integration.FieldDefinitions">
	  			<property name="fields">
		  		 	<list value-type="ch.pschatzmann.jflightcontroller4pi.parameters.ParametersEnum">
						<value>RUDDER</value>
						<value>AILERON</value>
						<value>ELEVETOR</value>
						<value>THROTTLE</value>
		        	</list>
		        </property>
        	</bean>
	  	</property>
	</bean>						
				

	# Flightgear

Flightgear supports a generic [protocal](http://wiki.flightgear.org/Generic_protocol).
In OS/X the definition needs to be located in /Applications/FlightGear.app/Contents/Resources/data/Protocol

So we need to set up a new file my-io.xml.

		<?xml version="1.0"?>
				
		<PropertyList>		
		 <generic>		
		  <input>
		    <binary_mode>false</binary_mode>
		    <binary_footer>none</binary_footer>
			<line_separator>newline</line_separator>
    			<var_separator>,</var_separator>
    			
		    <chunk>
		      <name>rudder</name>
		      <type>float</type>
		      <node>/controls/engines/engine[0]/throttle</node>
		    </chunk>

		    <chunk>
		      <name>aileron</name>
		      <type>float</type>
		      <node>/controls/flight/aileron</node>
		    </chunk>
		
		    <chunk>
		      <name>elevator</name>
		      <type>float</type>
		      <node>/controls/flight/elevator</node>
		    </chunk>
		
		    <chunk>
		      <name>throttle</name>
		      <type>float</type>
      		  <node>/controls/engines/engine[0]/throttle</node>
		    </chunk>
		
		 </input>
		 
		 <output>
		 	<chunk>
		      <name>roll degree</name>
		      <type>float</type>
		      <node>/orientation/roll-deg</node>
		    </chunk>
		 	<chunk>
		      <name>pitch degree</name>
		      <type>float</type>
		      <node>/orientation/pitch-deg</node>
		    </chunk>
		 	<chunk>
		      <name>speed in meters/sec</name>
		      <type>float</type>
		      <node>/velocities/groundspeed-kt</node>
		      <factor>0.514444</factor>
		    </chunk>
		    	<chunk>
		      <name>heading</name>
		      <type>float</type>
		      <node>/orientation/heading-deg</node>
		    </chunk>
		    	<chunk>
		      <name>altitude in m</name>
		      <type>float</type>
		      <factor>0.3048</factor>
		      <node>/position/altitude-ft</node>
		      <node></node>
		    </chunk>
		    
		 </output>
		
		 </generic>
		
		</PropertyList>



## Generic Interface Options    

When we start flightgear we need to indicate the Generic Interfaces:
	
fgfs  --generic=socket,in,10,localhost,7000,udp,my-io --generic=socket,out,10,localhost,7001,udp,my-io

## Other Important Options

fgfs --help --verbose 

gives the list of all available options. Here is a quick summary of the options which are relevant for our purpose

   --aircraft=name              Select an aircraft profile as defined by a top
   --airport=ID                 Specify starting position relative to an
                                airport
   --fdm=name                   Select the core flight dynamics model
                                Can be one of jsb, larcsim, yasim, magic,
                                balloon, ada, external, or null
   --aero=name                  Select aircraft aerodynamics model to load

   --on-ground                  Start at ground level (default)
   --in-air                     Start in air (implied when using --altitude)

   --timeofday={real,dawn,morning,noon,afternoon,dusk,evening,midnight}

   --vc=knots                   Specify initial airspeed

   --telnet=port	                Allow access via telnet 
   
   ---allow-nasal-from-sockets  Allow execution of nasal code via telnet


## Start a Simulation

I am living closing to Sion LSGS which has quite some nice mountains close by. So my simulation test flight is started with:


fgfs  --generic=socket,in,10,,7000,udp,my-io --generic=socket,out,10,,7001,udp,my-io --airport=LSGS  --timeofday=noon --httpd=8080

This is starting Flightgear. We still need to start the motors in the Menu of Flightgear. We can also position the plane directly into the air. 

After this, we are ready to fly the airplane with the help of our input from our Flight Controller e.g. from the Game Console. 



