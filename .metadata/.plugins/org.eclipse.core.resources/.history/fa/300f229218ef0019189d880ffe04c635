package ch.pschatzmann.jflightcontroller4pi.integration;

import ch.pschatzmann.jflightcontroller4pi.parameters.ParametersEnum;
import ch.pschatzmann.jflightcontroller4pi.scaling.IScaler;
import ch.pschatzmann.jflightcontroller4pi.scaling.NoScaler;
import ch.pschatzmann.jflightcontroller4pi.scaling.Scaler;

/**
 * Field Definition for input and output fields
 * 
 * @author pschatzmann
 *
 */
public class FieldDefinition {
	private static final IScaler NOSCALER = new NoScaler();
	private ParametersEnum inputField;
	private Double inputFieldsMax = 1.0;
	private Double inputFieldsMin = -1.0;
	private IScaler scaler = new NoScaler();

	public FieldDefinition() {
	}

	public FieldDefinition(ParametersEnum inputField, double inputFieldsMax, double inputFieldsMin) {
		this.inputField = inputField;
		this.inputFieldsMin = inputFieldsMin;
		this.inputFieldsMax = inputFieldsMax;
	}

	public FieldDefinition(ParametersEnum inputField) {
		this.inputField = inputField;
		this.scaler = NOSCALER;
	}

	public ParametersEnum getInputField() {
		return inputField;
	}

	public void setInputField(ParametersEnum inputField) {
		this.inputField = inputField;
	}

	public void setInputField(String inputField) {
		this.inputField = ParametersEnum.valueOf(inputField);
	}

	public double getInputFieldsMax() {
		return inputFieldsMax;
	}

	public void setInputFieldsMax(double inputFieldsMax) {
		this.inputFieldsMax = inputFieldsMax;
	}

	public double getInputFieldsMin() {
		return inputFieldsMin;
	}

	public void setInputFieldsMin(double inputFieldsMin) {
		this.inputFieldsMin = inputFieldsMin;
	}

	public IScaler getScaler() {
		if (scaler == null) {
			if (inputFieldsMin != null && inputFieldsMax != null)
				scaler = new Scaler(inputFieldsMin, inputFieldsMax);
			else
				scaler = NOSCALER;
		}
		return scaler;
	}
}
