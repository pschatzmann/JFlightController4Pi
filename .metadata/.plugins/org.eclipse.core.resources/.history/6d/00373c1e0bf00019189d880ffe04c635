package ch.pschatzmann.jflightcontroller4pi.imu.gps.copy;

/**
 * Processing of GPS Sensor values
 * https://www.ridgesolutions.ie/index.php/2013/11/14/algorithm-to-calculate-speed-from-two-gps-latitude-and-longitude-points-and-time-difference/
 * 
 * @author pschatzmann
 *
 */
public class GPSPosition {
	private double timestamp; // : 235317.000
	private double longitude; // 4003.9040,N is latitude in degrees.decimal minutes, north
	private double latitude; // 10512.5792,W is longitude in degrees.decimal minutes, west
	private int numberOfSatellites;
	private double altitude;

	public GPSPosition() {
	}

	public double getTime() {
		return timestamp;
	}

	public void setTime(double time) {
		this.timestamp = time;
	}

	public double getLongitude() {
		return longitude;
	}

	public void setLongitude(double longitude) {
		this.longitude = longitude;
	}

	public double getLatitude() {
		return latitude;
	}

	public void setLatitude(double latitude) {
		this.latitude = latitude;
	}

	public int getNumberOfSatellites() {
		return numberOfSatellites;
	}

	public void setNumberOfSatellites(int numberOfSatellites) {
		this.numberOfSatellites = numberOfSatellites;
	}

	public double getAltitude() {
		return altitude;
	}

	public void setAltitude(double altitude) {
		this.altitude = altitude;
	}

	/**
	 * Calculates the speed in meters per second (mps)
	 * 
	 * @param prior
	 * @return
	 */
	public double getSpeed(GPSPosition prior) {
		double dist = getDistance(prior);
		double time_s = (this.timestamp - prior.timestamp) / 1000.0;
		return dist / time_s;
	}

	/**
	 * Convert mps to kilometers per hour
	 * 
	 * @param mps
	 * @return
	 */

	public double toKmh(double mps) {
		return (mps * 3600.0) / 1000.0;
	}

	/**
	 * Calculates the distance to a prior measurement in meters
	 * 
	 * @param prior
	 * @return
	 */
	public double getDistance(GPSPosition prior) {
		// Convert degrees to radians
		double lat1 = latitude * Math.PI / 180.0;
		double lon1 = longitude * Math.PI / 180.0;

		double lat2 = prior.getLatitude() * Math.PI / 180.0;
		double lon2 = prior.getLongitude() * Math.PI / 180.0;

		// radius of earth in metres
		double r = 6378100;

		// P
		double rho1 = r * Math.cos(lat1);
		double z1 = r * Math.sin(lat1);
		double x1 = rho1 * Math.cos(lon1);
		double y1 = rho1 * Math.sin(lon1);

		// Q
		double rho2 = r * Math.cos(lat2);
		double z2 = r * Math.sin(lat2);
		double x2 = rho2 * Math.cos(lon2);
		double y2 = rho2 * Math.sin(lon2);

		// Dot product
		double dot = (x1 * x2 + y1 * y2 + z1 * z2);
		double cos_theta = dot / (r * r);

		double theta = Math.acos(cos_theta);

		// Distance in Metres
		return r * theta;
	}

	/**
	 * Calculates the Bearing compared to a prior measurement in degrees
	 * 
	 * @param prior
	 * @return
	 */
	public double getDirection(GPSPosition prior) {
		double longDiff = this.getLongitude() - prior.getLongitude();
		double y = (double) (Math.sin(longDiff) * Math.cos(this.getLatitude()));
		double x = (double) (Math.cos(prior.getLatitude()) * Math.sin(this.getLatitude())
				- Math.sin(prior.getLatitude()) * Math.cos(this.getLatitude()) * Math.cos(longDiff));
		return (Math.toDegrees((Math.atan2(y, x)) + 360) % 360);
	}
	
	/**
	 * Calculate the inclination angle in degrees
	 */
	public double getInclinationAngle(GPSPosition prior) {
		double distance = getDistance(prior);
		double deltaAltitude = prior.getAltitude() - this.getAltitude();
		return  Math.atan(deltaAltitude / distance);
	}
	

	/**
	 * Copy values
	 * @param fromValue
	 */
	public void setValue(GPSPosition fromValue) {
		this.timestamp = fromValue.timestamp;
		this.longitude = fromValue.longitude;
		this.latitude = fromValue.latitude;
		this.numberOfSatellites = fromValue.numberOfSatellites;
		this.altitude = fromValue.altitude;	
	}

}
