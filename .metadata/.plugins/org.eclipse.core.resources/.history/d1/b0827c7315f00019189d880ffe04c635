package ch.pschatzmann.jflightcontroller4pi.navigation;

import java.util.ArrayList;
import java.util.List;

import ch.pschatzmann.jflightcontroller4pi.devices.IOutDevice;
import ch.pschatzmann.jflightcontroller4pi.navigation.gps.GPSPosition;
import ch.pschatzmann.jflightcontroller4pi.navigation.gps.GPSPositionPlan;

/**
 * Navigation with the help of GPS coordinates
 * 
 * @author pschatzmann
 *
 */
public class FlightPlan implements IOutDevice {
	private GPS gps;
	private double toleranceMeters = 20;
	private List<GPSPositionPlan> flightPlan = new ArrayList();
	private double direction;
	private double angle;
	private double speed;
	
	/**
	 * Default Constructor
	 * @param gps
	 */
	public FlightPlan(GPS gps){
		this.gps = gps;
	}
	
	/**
	 * Gets the current flight plan
	 * @return
	 */
	public List<GPSPositionPlan> getFlightPlan() {
		return flightPlan;
	}
	
	/**
	 * Defines the flight plan
	 * @param flightPlan
	 */
	public void setFlightPlan(List<GPSPositionPlan> flightPlan) {
		this.flightPlan = flightPlan;
	}
		
	/**
	 * Returns the actual waypoint
	 * @return
	 */
	public GPSPositionPlan getCurrentWaypointInformation() {
		return flightPlan.get(0);		
	}
	
	public double getDirection() {
		return this.direction;
	}
	
	public double getInclinationAngle(GPSPosition prior) {
		return this.angle;
	}
	
	public double getSpeed() {
		return this.speed;
	}

	@Override
	public void setup() {
	}

	@Override
	public void shutdown() {
		flightPlan.clear();
		direction = 0;
		angle = 0;
		speed = 0;
	}

	@Override
	public void processOutput() {
		// replace the waypoint of we have reached to target 
		double distanceToWayPoint = gps.getValue().getDistance(getCurrentWaypointInformation());
		if (distanceToWayPoint<toleranceMeters) {
			flightPlan.remove(0);
		}
		GPSPositionPlan waypoint = getCurrentWaypointInformation();
		this.direction = waypoint.getDirection(gps.getValue());
		this.angle = waypoint.getInclinationAngle(gps.getValue());	
		this.speed = waypoint.getSpeed();		
	}


}
