package ch.pschatzmann.jflightcontroller4pi.tests;

import java.net.DatagramSocket;
import java.net.SocketException;
import java.util.Arrays;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import ch.pschatzmann.jflightcontroller4pi.FlightController;
import ch.pschatzmann.jflightcontroller4pi.integration.DatagramReader;
import ch.pschatzmann.jflightcontroller4pi.integration.DatagramWriter;
import ch.pschatzmann.jflightcontroller4pi.integration.FieldDefinition;
import ch.pschatzmann.jflightcontroller4pi.integration.Utils;
import ch.pschatzmann.jflightcontroller4pi.parameters.ParametersEnum;

public class TestDatagram {
	static FlightController ctl;
	static DatagramWriter w;
	static DatagramReader r;
	
	@BeforeClass
	public static void setup() throws SocketException {
		ctl = new FlightController();
		DatagramSocket socket = new DatagramSocket(5000);
		List<FieldDefinition> def = Arrays.asList(new FieldDefinition(ParametersEnum.RUDDER));
		w = new DatagramWriter(ctl,def, socket);
		r = new DatagramReader(ctl,def, socket);
		ctl.addDevices(Arrays.asList(w, r));
		ctl.setValue(ParametersEnum.RUDDER, 0.123);
		new Timer().schedule(Utils.timerTask(() -> ctl.shutdown()), 5000);
		ctl.run();
		
	}

	@Test
	public void testReceive() {
		Assert.assertTrue(r.getRecordCount() > 0);
	}

	@Test
	public void testSend() {
		Assert.assertTrue(w.getRecordCount() > 0);
	}


}
