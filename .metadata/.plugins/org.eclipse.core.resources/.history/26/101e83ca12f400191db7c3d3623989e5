package ch.pschatzmann.jflightcontroller4pi.tests;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;

import ch.pschatzmann.jflightcontroller4pi.FlightController;
import ch.pschatzmann.jflightcontroller4pi.devices.OutDevice;
import ch.pschatzmann.jflightcontroller4pi.loop.ControlLoopWithTimers;
import ch.pschatzmann.jflightcontroller4pi.loop.IControlLoop;
import ch.pschatzmann.jflightcontroller4pi.parameters.ParametersEnum;
import ch.pschatzmann.jflightcontroller4pi.protocols.NullDevice;

/**
 * Checks the basic functionality of the FlightController
 * 
 * @author pschatzmann
 *
 */

public class TestFlightControllerSpring {
	private static Logger log = LoggerFactory.getLogger(TestFlightControllerSpring.class);
	static FlightController ctl;
	static OutDevice rudder;
	static OutDevice elevator;
	static OutDevice aileron;
	static OutDevice throttle;
	
	@BeforeClass
	public static void setup() {
		@SuppressWarnings("resource")
		ApplicationContext context = new ClassPathXmlApplicationContext("config.xml");
		ctl = (FlightController) context.getBean("flightController");
		ctl.selectMode("Stabilized");
		rudder = (OutDevice)ctl.getControlDevice(ParametersEnum.RUDDER);
		elevator = (OutDevice)ctl.getControlDevice(ParametersEnum.ELEVATOR);
		aileron = (OutDevice)ctl.getControlDevice(ParametersEnum.AILERON);
		throttle = (OutDevice)ctl.getControlDevice(ParametersEnum.THROTTLE);
		
		// use nun blocking control loop for the junit test
		IControlLoop cl = new ControlLoopWithTimers(ctl,false);
		ctl.setControlLoop(cl);
		ctl.run();
		
		sleep();
	}

	private static void sleep() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			log.error(e.getMessage(),e);
		}
	}

	@Test
	public void testControls() {
		Assert.assertEquals(7, ctl.getDevices().size());
		Assert.assertNotNull(ctl);
		Assert.assertNotNull(rudder);
		Assert.assertNotNull(elevator);
		Assert.assertNotNull(aileron);
		Assert.assertNotNull(throttle);
	}

	
	@Test
	public void testBasicFlowAileron() {

		// check initial value
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.AILERON).value, 0.001);
		Assert.assertEquals(50.0, ((NullDevice) (aileron.getPin())).getValue(), 0.001);

		// Update Aileron values
		ctl.setValue(ParametersEnum.ROLL, -1.0);
		Assert.assertEquals(-1.0, ctl.getValue(ParametersEnum.ROLL).value, 0.001);
		Assert.assertEquals(-1.0, ctl.getValue(ParametersEnum.AILERON).value, 0.001);
		Assert.assertEquals(0.0, ((NullDevice) (aileron.getPin())).getValue(), 0.001);

		ctl.setValue(ParametersEnum.ROLL, 1.0);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.ROLL).value, 0.001);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.AILERON).value, 0.001);
		Assert.assertEquals(100.0, ((NullDevice) (aileron.getPin())).getValue(), 0.001);

		ctl.setValue(ParametersEnum.ROLL, 0.0);
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.ROLL).value, 0.001);
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.AILERON).value, 0.001);
		Assert.assertEquals(50, ((NullDevice) (aileron.getPin())).getValue(), 0.001);

		ctl.shutdown();

	}

	@Test
	public void testBasicFlowThrottle() {

		// check initial value
		Assert.assertEquals(-1.0, ctl.getValue(ParametersEnum.THROTTLE).value, 0.001);
		Assert.assertEquals(0.0, ((NullDevice) (throttle.getPin())).getValue(), 0.001);

		ctl.setValue(ParametersEnum.SPEED, 1.0);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.SPEED).value, 0.001);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.THROTTLE).value, 0.001);
		Assert.assertEquals(100, ((NullDevice) (throttle.getPin())).getValue(), 0.001);

		ctl.shutdown();

	}

	@Test
	public void testBasicFlowRudder() {

		// check initial value
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.RUDDER).value, 0.001);
		Assert.assertEquals(50.0, ((NullDevice) (rudder.getPin())).getValue(), 0.001);

		ctl.setValue(ParametersEnum.YAW, 1.0);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.YAW).value, 0.001);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.RUDDER).value, 0.001);
		Assert.assertEquals(100, ((NullDevice) (rudder.getPin())).getValue(), 0.001);

		ctl.shutdown();

	}

	@Test
	public void testBasicFlowElevator() throws InterruptedException {
		// check initial value
		Assert.assertEquals(0.0, ctl.getValue(ParametersEnum.ELEVATOR).value, 0.001);
		Assert.assertEquals(50.0, ((NullDevice) (elevator.getPin())).getValue(), 0.001);

		ctl.setValue(ParametersEnum.PITCH, 1.0);
		Thread.sleep(1000);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.PITCH).value, 0.001);
		Assert.assertEquals(1.0, ctl.getValue(ParametersEnum.ELEVATOR).value, 0.001);
		Assert.assertEquals(100.0, ((NullDevice) (elevator.getPin())).getValue(), 0.001);

		ctl.shutdown();

	}
}
