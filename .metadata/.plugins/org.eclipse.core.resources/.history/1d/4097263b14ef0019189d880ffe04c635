package ch.pschatzmann.jflightcontroller4pi.modes;

import java.util.Collection;
import java.util.HashSet;
import java.util.stream.Collectors;

import ch.pschatzmann.jflightcontroller4pi.FlightController;
import ch.pschatzmann.jflightcontroller4pi.devices.IDevice;
import ch.pschatzmann.jflightcontroller4pi.devices.IOutDeviceEx;
import ch.pschatzmann.jflightcontroller4pi.devices.IRecalculate;

/**
 * Generic Flight Mode implementation which can be configured e.g. with Spring
 * 
 * @author pschatzmann
 *
 */
public class FlightMode implements IFlightMode {
	private Collection<IRecalculate> recalcCollection = new HashSet();
	private FlightController flightController;

	/**
	 * Empty Constructor
	 */
	public FlightMode() {
	}

	/**
	 * Setup of with Initial (Empty) Mode
	 */
	public FlightMode(FlightController flightController, Collection<IRecalculate> rules ) {
		this.flightController = flightController;		
		this.recalcCollection = rules;
	}
	
	/**
	 * Add local devices to the controller and update the calculation rules in the devices
	 */
	@Override
	public void setup() {
		// make the devices known to the controller
		flightController.addDevices(this.getDevices());
		// set the calculation rules in the devices
		recalcCollection.forEach(rule -> rule.getDevice().setRecalculate(rule));
	}

	@Override
	public void shutdown() {
		flightController.removeDevices(this.getDevices());
	}

	public Collection<IDevice> getDevices() {
		return recalcCollection.stream().map(c -> c.getDevice()).collect(Collectors.toSet());
	}

	public FlightController getFlightController() {
		return flightController;
	}

	public void setFlightController(FlightController flightController) {
		this.flightController = flightController;
	}
	
	public Collection<IRecalculate> getRecalcRules() {
		return recalcCollection;
	}

	public void setRecalcRules(Collection<IRecalculate> recalcCollection) {
		this.recalcCollection = recalcCollection;
		recalcCollection.forEach(c -> {
			IDevice dev = c.getDevice();
			((IOutDeviceEx)dev).setRecalculate(c);
		});
	}

}
