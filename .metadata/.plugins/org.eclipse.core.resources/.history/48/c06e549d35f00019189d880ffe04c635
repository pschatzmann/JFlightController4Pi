package ch.pschatzmann.jflightcontroller4pi.modes;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ch.pschatzmann.jflightcontroller4pi.FlightController;
import ch.pschatzmann.jflightcontroller4pi.devices.IOutDeviceEx;
import ch.pschatzmann.jflightcontroller4pi.devices.IRecalculate;
import ch.pschatzmann.jflightcontroller4pi.parameters.ParametersEnum;

/**
 * Rules for managing the flight with an autoplot
 * 
 * @author pschatzmann
 *
 */
public class AutoPilotModeRule implements IRecalculate {
	private static final Logger log = LoggerFactory.getLogger(AutoPilotModeRule.class);
	private FlightController flightController;

	public AutoPilotModeRule(){		
	}

	public AutoPilotModeRule(FlightController flightController){	
		this.flightController = flightController;
	}

	
	@Override
	public IOutDeviceEx getDevice() {
		return null;
	}

	@Override
	public void recalculate() {
		// speed is already set my autopilot
		// handle direction with aileron
		double directionTarget = flightController.getValue(ParametersEnum.DIRECTION).value;
		
		// handle height with Elevator
		double altitudeTarget = flightController.getValue(ParametersEnum.AUTOALTITUDE).value;
		double altitudeEff = flightController.getValue(ParametersEnum.SENSORALTITUDE).value;
		
		double elevatorValue = flightController.getValue(ParametersEnum.ELEVETOR).value;
		

	}

	public FlightController getFlightController() {
		return flightController;
	}

	public void setFlightController(FlightController flightController) {
		this.flightController = flightController;
	}

}
