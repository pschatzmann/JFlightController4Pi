package ch.pschatzmann.jflightcontroller4pi.protocols;

import com.pi4j.io.i2c.I2CBus;
import com.pi4j.io.i2c.I2CDevice;
import com.pi4j.io.i2c.I2CFactory;

/**
 * I2C is a useful bus that allows data exchange between microcontrollers and
 * peripherals with a minimum of wiring. It potentially allows for many devices,
 * as long as their addresses don't conflict.
 * 
 * Pinout: https://github.com/uraimo/SwiftyGPIO/wiki/GPIO-Pinout
 * 
 * @author pschatzmann
 *
 */

public class InputFromPiI2C implements IPwmIn {
	private StringBuffer sb = new StringBuffer();
	private I2CDevice device;
	private int bus = I2CBus.BUS_0;
	private byte deviceAddess = 0x39;
	private byte controlAddress = (byte) 0x80;
	private byte powerUp = (byte) 0x03;
	private byte powerDown = (byte) 0x00;
	private byte dataAddresses[] = {(byte) 0x8C, (byte) 0x8E};


	public InputFromPiI2C(String pinName) {
		try {

			// get the I2C bus to communicate on
			I2CBus i2c = I2CFactory.getInstance(bus);

			// create an I2C device for an individual device on the bus that you want to
			// communicate with in this example we will use the default address for the TSL2561 chip which is
			// 0x39.
			I2CDevice device = i2c.getDevice(deviceAddess);

			// next we want to start taking light measurements, so we need to power up the
			// sensor
			device.write(controlAddress, powerUp);
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}

	}

	@Override
	public String getValues() {
		try {
			sb.setLength(0);
			for (byte data : dataAddresses) {
				if (data!=dataAddresses[0]) {
					sb.append(" ");
				}
				int data0 = device.read(data);
				sb.append((String.format("0x%02x", data0)));
			}
			return sb.toString();
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	public void shutdown() {
		try {
			device.write(controlAddress, powerDown);
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}

}
